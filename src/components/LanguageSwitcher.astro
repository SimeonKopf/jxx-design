---
// src/components/LanguageSwitcher.astro - Simple working version
---

<div class="language-switcher relative">
  <button 
    id="language-toggle" 
    class="flex items-center space-x-2 bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/20 text-gray-700 hover:text-gray-900 px-3 py-2 rounded-full transition-all duration-300 text-sm font-medium epilogue min-h-[44px] min-w-[80px]"
    type="button"
  >
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"></path>
    </svg>
    <span id="current-language" class="epilogue font-medium">DE</span>
    <svg class="w-3 h-3 transition-transform duration-200" id="language-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>
  
  <!-- Language Options Dropdown -->
  <div id="language-options" class="absolute top-full mt-2 right-0 bg-white border border-gray-200 rounded-lg shadow-xl min-w-[100px] opacity-0 scale-95 transform transition-all duration-200 pointer-events-none z-[60] overflow-hidden">
    <button 
      type="button"
      data-lang="de" 
      class="lang-option w-full text-left px-4 py-3 hover:bg-gray-50 transition-colors duration-200 text-sm font-medium text-gray-700 hover:text-gray-900 flex items-center space-x-3 epilogue min-h-[48px]"
    >
      <span class="text-base">ðŸ‡©ðŸ‡ª</span>
      <span class="epilogue font-medium">DE</span>
    </button>
    <button 
      type="button"
      data-lang="en" 
      class="lang-option w-full text-left px-4 py-3 hover:bg-gray-50 transition-colors duration-200 text-sm font-medium text-gray-700 hover:text-gray-900 flex items-center space-x-3 border-t border-gray-100 epilogue min-h-[48px]"
    >
      <span class="text-base">ðŸ‡¬ðŸ‡§</span>
      <span class="epilogue font-medium">EN</span>
    </button>
  </div>
</div>

<script type="module">
  import { getTranslations, getCurrentLanguage } from '../data/languages.js';
  
  let currentLanguage = getCurrentLanguage();
  let isOpen = false;
  
  function updateUI() {
    const currentLangSpan = document.getElementById('current-language');
    if (currentLangSpan) {
      currentLangSpan.textContent = currentLanguage.toUpperCase();
    }
    
    // Update active state in dropdown
    const langButtons = document.querySelectorAll('[data-lang]');
    langButtons.forEach(button => {
      if (button.dataset.lang === currentLanguage) {
        button.classList.add('bg-blue-50', 'font-semibold');
      } else {
        button.classList.remove('bg-blue-50', 'font-semibold');
      }
    });
  }
  
  function translatePage() {
    const translations = getTranslations(currentLanguage);
    
    // Navigation links
    const navHome = document.querySelector('nav a[href="/"]');
    const navArtworks = document.querySelector('nav a[href="/#artworks"]');
    const navAbout = document.querySelector('nav a[href="/#about"]');
    const navContact = document.querySelector('nav a[href="/#contact"]');
    
    if (navHome) navHome.textContent = translations.home;
    if (navArtworks) navArtworks.textContent = translations.artworks;
    if (navAbout) navAbout.textContent = translations.about;
    if (navContact) navContact.textContent = translations.contact;
    
    // All elements with data-translate attributes
    const translateElements = document.querySelectorAll('[data-translate]');
    translateElements.forEach(element => {
      const key = element.getAttribute('data-translate');
      if (translations[key]) {
        if (key.includes('about-text')) {
          element.innerHTML = translations[key];
        } else {
          element.textContent = translations[key];
        }
      }
    });
    
    // Form placeholders
    const nameInput = document.querySelector('input[name="name"]');
    const emailInput = document.querySelector('input[name="email"]');
    const messageTextarea = document.querySelector('textarea[name="message"]');
    
    if (nameInput) nameInput.placeholder = translations.namePlaceholder;
    if (emailInput) emailInput.placeholder = translations.emailPlaceholder;
    if (messageTextarea && translations.messagePlaceholder) {
      messageTextarea.placeholder = translations.messagePlaceholder;
    }
  }
  
  function openDropdown() {
    const options = document.getElementById('language-options');
    const arrow = document.getElementById('language-arrow');
    
    if (options && arrow) {
      options.classList.remove('opacity-0', 'scale-95', 'pointer-events-none');
      options.classList.add('opacity-100', 'scale-100');
      arrow.style.transform = 'rotate(180deg)';
      isOpen = true;
    }
  }
  
  function closeDropdown() {
    const options = document.getElementById('language-options');
    const arrow = document.getElementById('language-arrow');
    
    if (options && arrow) {
      options.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
      options.classList.remove('opacity-100', 'scale-100');
      arrow.style.transform = 'rotate(0deg)';
      isOpen = false;
    }
  }
  
  function toggleDropdown() {
    if (isOpen) {
      closeDropdown();
    } else {
      openDropdown();
    }
  }
  
  function changeLanguage(lang) {
    if (lang !== currentLanguage) {
      currentLanguage = lang;
      localStorage.setItem('jxx-language', lang);
      updateUI();
      translatePage();
    }
    closeDropdown();
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', function() {
    const toggle = document.getElementById('language-toggle');
    const langButtons = document.querySelectorAll('.lang-option');
    
    // Initial setup
    updateUI();
    translatePage();
    
    // Toggle button event
    if (toggle) {
      toggle.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        toggleDropdown();
      });
    }
    
    // Language selection
    langButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        const lang = this.dataset.lang;
        if (lang) {
          changeLanguage(lang);
        }
      });
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function(e) {
      const switcher = document.querySelector('.language-switcher');
      if (switcher && !switcher.contains(e.target)) {
        closeDropdown();
      }
    });
    
    // Close on escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        closeDropdown();
      }
    });
  });
</script>

<style>
  .language-switcher {
    z-index: 50;
  }
  
  .lang-option:active {
    background-color: #f3f4f6;
  }
  
  @media (hover: none) {
    .lang-option:hover {
      background-color: transparent;
    }
    
    .lang-option:active {
      background-color: #f3f4f6;
    }
  }
</style>