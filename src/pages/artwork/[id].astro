---
// src/pages/artwork/[id].astro - With mobile borders added
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import { getAllArtworks } from '../../data/series.js';

export function getStaticPaths() {
  const allArtworks = getAllArtworks();
  return allArtworks.map((artwork) => ({
    params: { id: artwork.id },
    props: { artwork },
  }));
}

const { artwork } = Astro.props;
---

<Layout title={`${artwork.title} - JXX Design`}>
  <Navigation />
  
  <!-- Artwork Detail Page -->
  <main class="pt-20 min-h-screen bg-white">
    <div class="container py-12">
      <!-- Back to Gallery -->
      <div class="mb-8">
        <a href="/" class="inline-flex items-center text-gray-600 hover:text-gray-900 transition-colors duration-300">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
          <span data-translate="back-to-gallery">Back to Gallery</span>
        </a>
      </div>
      
      <!-- Artwork Content -->
      <div class="grid lg:grid-cols-2 gap-12 max-w-6xl mx-auto">
        <!-- Artwork Image -->
        <div class="space-y-6">
          <!-- Desktop: No border, Mobile: Border -->
          <div class="bg-gray-50 rounded-2xl overflow-hidden md:border-0 border-2 border-gray-200">
            <img 
              src={artwork.image} 
              alt={artwork.title}
              class="w-full h-auto object-cover"
            />
          </div>
          
          <!-- Artwork ID -->
          <div class="text-center">
            <span class="inline-block bg-gray-100 text-gray-600 px-4 py-2 rounded-full text-sm font-mono epilogue">
              #{artwork.id}
            </span>
          </div>
        </div>
        
        <!-- Artwork Details and Contact -->
        <div class="space-y-8">
          <!-- Artwork Info - Desktop: No border, Mobile: Border -->
          <div class="space-y-6 md:p-0 md:bg-transparent md:border-0 p-6 bg-white border-2 border-gray-200 rounded-2xl">
            <div>
              <h1 class="text-4xl font-bold text-gray-900 mb-2">{artwork.title}</h1>
              {artwork.sold ? (
                <div class="inline-block bg-red-100 text-red-800 px-3 py-1 rounded-full text-sm font-medium" data-translate="sold">
                  Sold
                </div>
              ) : artwork.price && (
                <div class="text-3xl font-bold text-gray-900">€{artwork.price}</div>
              )}
            </div>
            
            <div class="space-y-3 text-gray-600">
              <div class="flex justify-between">
                <span class="font-medium" data-translate="dimensions">Dimensions:</span>
                <span>{artwork.dimensions}</span>
              </div>
              <div class="flex justify-between">
                <span class="font-medium" data-translate="medium">Medium:</span>
                <span>{artwork.medium}</span>
              </div>
              <div class="flex justify-between">
                <span class="font-medium" data-translate="year">Year:</span>
                <span>{artwork.year}</span>
              </div>
            </div>
            
            {artwork.description && (
              <div class="border-t pt-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-3" data-translate="about-this-piece">About this piece</h3>
                <p class="text-gray-600 leading-relaxed">{artwork.description}</p>
              </div>
            )}
          </div>
          
          <!-- Contact Form -->
          <div class="border-t pt-8">
            <div class="bg-gray-50 rounded-2xl p-8 border-2 border-gray-200">
              <h2 class="text-2xl font-bold text-gray-900 mb-6 epilogue" data-translate={artwork.sold ? "interested-in-similar" : "interested-in-artwork"}>
                {artwork.sold ? 'Interested in Similar Work?' : 'Interested in this Artwork?'}
              </h2>
              
              <form id="artwork-inquiry-form" class="space-y-6">
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <label for="name" class="block text-sm font-medium text-gray-700 mb-2 epilogue">
                      <span data-translate="name">Name</span> *
                    </label>
                    <input 
                      type="text" 
                      id="name" 
                      name="name" 
                      required 
                      class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-300 epilogue"
                      placeholder=""
                      data-translate-placeholder="name-placeholder"
                    />
                  </div>
                  
                  <div>
                    <label for="email" class="block text-sm font-medium text-gray-700 mb-2 epilogue">
                      <span data-translate="email">Email</span> *
                    </label>
                    <input 
                      type="email" 
                      id="email" 
                      name="email" 
                      required 
                      class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-300 epilogue"
                      placeholder=""
                      data-translate-placeholder="email-placeholder"
                    />
                  </div>
                </div>
                
                <div>
                  <label for="subject" class="block text-sm font-medium text-gray-700 mb-2 epilogue" data-translate="subject">Subject</label>
                  <input 
                    type="text" 
                    id="subject" 
                    name="subject" 
                    readonly
                    value={`Artwork Inquiry: #${artwork.id} - ${artwork.title}`}
                    class="w-full px-4 py-3 bg-gray-100 border border-gray-300 rounded-lg cursor-not-allowed epilogue"
                  />
                </div>
                
                <div>
                  <label for="message" class="block text-sm font-medium text-gray-700 mb-2 epilogue">
                    <span data-translate="message">Message</span> *
                  </label>
                  <textarea 
                    id="message" 
                    name="message" 
                    rows="5" 
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-300 resize-none epilogue"
                    placeholder=""
                    data-artwork-sold={artwork.sold ? 'true' : 'false'}
                  ></textarea>
                </div>
                
                <button 
                  type="submit" 
                  class="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold py-4 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl epilogue"
                  data-translate="send-inquiry"
                >
                  Send Inquiry
                </button>
              </form>
              
              <!-- Success/Error Messages -->
              <div id="form-message" class="mt-4 p-4 rounded-lg hidden">
                <p id="message-text" class="text-sm font-medium"></p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<!-- EmailJS SDK -->
<script src="https://cdn.jsdelivr.net/npm/@emailjs/browser@4/dist/email.min.js"></script>

<script>
  // EmailJS Configuration - REPLACE THESE WITH YOUR ACTUAL VALUES
  const EMAILJS_CONFIG = {
    SERVICE_ID: 'service_keg7hm6',        // Replace with your service ID
    TEMPLATE_ID: 'template_5exinwt',      // Replace with your template ID
    PUBLIC_KEY: 'khOTmY1cpKsPrjL26'         // Replace with your public key       
  };
  
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize EmailJS
    emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);
    
    const form = document.getElementById('artwork-inquiry-form');
    const messageDiv = document.getElementById('form-message');
    const messageText = document.getElementById('message-text');
    const messageTextarea = document.getElementById('message');
    
    // Get current language and set up translations
    const currentLang = localStorage.getItem('jxx-language') || 'de';
    const translations = {
      de: {
        namePlaceholder: 'Ihr vollständiger Name',
        emailPlaceholder: 'ihre@email.de',
        messagePlaceholder: 'Erzählen Sie mir von Ihrem Projekt...',
        purchaseInquiry: 'Ich interessiere mich für den Kauf dieses Kunstwerks. Bitte geben Sie mir weitere Informationen über die Verfügbarkeit und Kaufdetails.',
        similarInquiry: 'Ich interessiere mich für ähnliche Kunstwerke oder möchte über neue Werke informiert werden.',
        sending: 'Wird gesendet...',
        messageSent: '✓ Nachricht gesendet!',
        successMessage: 'Vielen Dank! Ihre Nachricht wurde erfolgreich gesendet. Ich melde mich bald bei Ihnen.',
        errorMessage: 'Entschuldigung, beim Senden Ihrer Nachricht ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut.',
        requiredFieldsError: 'Bitte füllen Sie alle Pflichtfelder aus.',
        error: 'Fehler - Erneut versuchen'
      },
      en: {
        namePlaceholder: 'Your full name',
        emailPlaceholder: 'your@email.com', 
        messagePlaceholder: 'Tell me about your project...',
        purchaseInquiry: 'I am interested in purchasing this artwork. Please provide more information about availability and purchase details.',
        similarInquiry: 'I am interested in similar artworks or would like to be notified of new pieces.',
        sending: 'Sending...',
        messageSent: '✓ Message Sent!',
        successMessage: 'Thank you! Your message has been sent successfully. I\'ll get back to you soon.',
        errorMessage: 'Sorry, there was an error sending your message. Please try again.',
        requiredFieldsError: 'Please fill in all required fields.',
        error: 'Error - Try Again'
      }
    };
    
    const t = translations[currentLang];
    
    // Set up form with translations
    function setupForm() {
      const nameInput = document.getElementById('name');
      const emailInput = document.getElementById('email');
      
      if (nameInput) nameInput.placeholder = t.namePlaceholder;
      if (emailInput) emailInput.placeholder = t.emailPlaceholder;
      
      // Set default message based on artwork status
      const isArtworkSold = messageTextarea.dataset.artworkSold === 'true';
      if (messageTextarea && !messageTextarea.value.trim()) {
        messageTextarea.placeholder = t.messagePlaceholder;
        messageTextarea.value = isArtworkSold ? t.similarInquiry : t.purchaseInquiry;
      }
    }
    
    // Initialize form
    setupForm();
    
    // Show message function
    function showMessage(message, type) {
      messageDiv.classList.remove('hidden');
      messageText.textContent = message;
      
      if (type === 'success') {
        messageDiv.className = 'mt-4 p-4 rounded-lg bg-green-100 border border-green-300';
        messageText.className = 'text-sm font-medium text-green-800';
      } else if (type === 'error') {
        messageDiv.className = 'mt-4 p-4 rounded-lg bg-red-100 border border-red-300';
        messageText.className = 'text-sm font-medium text-red-800';
      }
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        messageDiv.classList.add('hidden');
      }, 5000);
    }
    
    form?.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const submitBtn = this.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      
      // Validate required fields
      const name = this.querySelector('#name').value.trim();
      const email = this.querySelector('#email').value.trim();
      const message = this.querySelector('#message').value.trim();
      
      if (!name || !email || !message) {
        showMessage(t.requiredFieldsError, 'error');
        return;
      }
      
      // Show loading state
      submitBtn.textContent = t.sending;
      submitBtn.disabled = true;
      submitBtn.classList.add('opacity-75');
      
      try {
        // Prepare template parameters
        const templateParams = {
          name: name,
          email: email,
          subject: this.querySelector('#subject').value,
          message: message
        };
        
        // Send email via EmailJS
        const response = await emailjs.send(
          EMAILJS_CONFIG.SERVICE_ID,
          EMAILJS_CONFIG.TEMPLATE_ID,
          templateParams,
          EMAILJS_CONFIG.PUBLIC_KEY
        );
        
        console.log('EmailJS Response:', response);
        
        // Show success state
        submitBtn.textContent = t.messageSent;
        submitBtn.classList.remove('from-blue-600', 'to-purple-600', 'hover:from-blue-700', 'hover:to-purple-700');
        submitBtn.classList.add('bg-green-600', 'hover:bg-green-700');
        
        // Show success message
        showMessage(t.successMessage, 'success');
        
        // Reset form after delay
        setTimeout(() => {
          this.reset();
          setupForm(); // Re-setup form with translations
          
          // Reset button
          submitBtn.textContent = originalText;
          submitBtn.disabled = false;
          submitBtn.classList.remove('opacity-75', 'bg-green-600', 'hover:bg-green-700');
          submitBtn.classList.add('from-blue-600', 'to-purple-600', 'hover:from-blue-700', 'hover:to-purple-700');
        }, 3000);
        
      } catch (error) {
        console.error('EmailJS Error:', error);
        
        // Show error state
        submitBtn.textContent = t.error;
        submitBtn.classList.remove('from-blue-600', 'to-purple-600', 'hover:from-blue-700', 'hover:to-purple-700');
        submitBtn.classList.add('bg-red-600', 'hover:bg-red-700');
        
        // Show error message
        let errorMessage = t.errorMessage;
        if (error.text) {
          errorMessage += ` (${error.text})`;
        }
        showMessage(errorMessage, 'error');
        
        setTimeout(() => {
          submitBtn.textContent = originalText;
          submitBtn.disabled = false;
          submitBtn.classList.remove('opacity-75', 'bg-red-600', 'hover:bg-red-700');
          submitBtn.classList.add('from-blue-600', 'to-purple-600', 'hover:from-blue-700', 'hover:to-purple-700');
        }, 3000);
      }
    });
  });
</script>