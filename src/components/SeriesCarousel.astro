---
export interface Props {
  series: {
    id: string;
    title: string;
    description: string;
    artworks: Array<{
      id: string;
      title: string;
      price: string;
      sold: boolean;
      image: string;
    }>;
  };
  imageLeft?: boolean;
}

const { series, imageLeft = false } = Astro.props;
---

<div class={`series-container ${imageLeft ? 'image-left' : 'image-right'} w-full max-w-6xl mx-auto`}>
  <!-- Desktop Layout -->
  <div class="hidden md:grid md:grid-cols-2 gap-16 items-center px-4">
    <!-- Desktop Carousel -->
    <div class={`carousel-container ${imageLeft ? '' : 'md:order-2'}`}>
      <div class="relative bg-white rounded-xl shadow-sm overflow-hidden mx-auto max-w-md">
        <div class="desktop-carousel relative" data-series={series.id}>
          <div class="desktop-track flex transition-transform duration-500 ease-in-out">
            {series.artworks.map((artwork, index) => (
              <div class="desktop-slide flex-shrink-0 w-full relative group cursor-pointer" data-artwork-id={artwork.id}>
                <a href={`/artwork/${artwork.id}`} class="block w-full h-full">
                  <img 
                    src={artwork.image} 
                    alt={artwork.title}
                    class="w-full h-80 object-cover"
                  />
                  <div class="absolute inset-0 bg-gradient-to-t from-black/5 to-transparent group-hover:from-black/10 transition-all duration-300"></div>
                </a>
                {artwork.sold && (
                  <div class="absolute top-3 right-3 bg-white text-gray-900 px-2 py-1 rounded-md text-xs font-medium shadow-sm">
                    Sold
                  </div>
                )}
              </div>
            ))}
          </div>
          
          {series.artworks.length > 1 && (
            <>
              <button class="desktop-prev absolute left-3 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white text-gray-600 rounded-full p-2 shadow-md z-10">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </button>
              <button class="desktop-next absolute right-3 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white text-gray-600 rounded-full p-2 shadow-md z-10">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
            </>
          )}
        </div>
        
        {series.artworks.length > 1 && (
          <div class="flex justify-center space-x-1.5 py-3 bg-white">
            {series.artworks.map((_, index) => (
              <button 
                class={`desktop-dot w-1.5 h-1.5 rounded-full transition-all duration-300 ${index === 0 ? 'bg-gray-700' : 'bg-gray-300'}`}
                data-index={index}
              ></button>
            ))}
          </div>
        )}
      </div>
    </div>
    
    <!-- Desktop Text Content -->
    <div class={`content-container ${imageLeft ? 'md:order-2' : 'md:order-1'} flex flex-col justify-center`}>
      <div class={`space-y-4 ${!imageLeft ? 'text-right' : 'text-left'} max-w-md mx-auto`}>
        <div>
          <h3 class="text-2xl font-bold text-gray-900 mb-4 epilogue">{series.title}</h3>
        </div>
        
        <div class="desktop-artwork-info">
          {series.artworks.map((artwork, index) => (
            <div class={`desktop-info ${index === 0 ? 'block' : 'hidden'}`} data-info-index={index}>
              <div class="space-y-1">
                <div class="text-xl font-bold text-gray-900 epilogue">#{artwork.id}</div>
                <div class="text-base font-medium text-gray-700 epilogue">{artwork.title}</div>
                {!artwork.sold && (
                  <div class="text-base font-medium text-gray-900 epilogue">€{artwork.price}</div>
                )}
                {artwork.sold && (
                  <div class="text-base font-medium text-gray-900 epilogue">Sold</div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
  
  <!-- Mobile Layout -->
  <div class="md:hidden px-4">
    <div class="space-y-4 max-w-md mx-auto">
      <div class="text-center">
        <h3 class="text-xl font-bold text-gray-900 mb-4 epilogue">{series.title}</h3>
      </div>
      
      <!-- Mobile Carousel with BORDERS -->
      <div class="mobile-carousel-container">
        <div class="relative bg-white rounded-xl shadow-sm border-2 border-gray-200 overflow-hidden">
          <div class="mobile-carousel relative" data-series={`${series.id}-mobile`}>
            <div class="mobile-track flex" style="transform: translateX(0%); transition: none;">
              {series.artworks.map((artwork, index) => (
                <div class="mobile-slide flex-shrink-0 w-full relative" data-artwork-id={artwork.id} data-index={index}>
                  <div class="mobile-image-wrapper border-b-2 border-gray-200">
                    <img 
                      src={artwork.image} 
                      alt={artwork.title}
                      class="w-full h-72 object-cover cursor-pointer"
                      draggable="false"
                    />
                  </div>
                  {artwork.sold && (
                    <div class="absolute top-3 right-3 bg-white text-gray-900 px-2 py-1 rounded-md text-xs font-medium shadow-sm">
                      Sold
                    </div>
                  )}
                </div>
              ))}
            </div>
            
            {series.artworks.length > 1 && (
              <>
                <button class="mobile-prev absolute left-2 top-1/2 -translate-y-1/2 bg-white/90 text-gray-600 rounded-full p-2 shadow-md z-20">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                </button>
                <button class="mobile-next absolute right-2 top-1/2 -translate-y-1/2 bg-white/90 text-gray-600 rounded-full p-2 shadow-md z-20">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </button>
              </>
            )}
          </div>
          
          {series.artworks.length > 1 && (
            <div class="flex justify-center space-x-1.5 py-3 bg-white border-t border-gray-200">
              {series.artworks.map((_, index) => (
                <div 
                  class={`mobile-dot w-1.5 h-1.5 rounded-full cursor-pointer ${index === 0 ? 'bg-gray-700' : 'bg-gray-300'}`}
                  data-index={index}
                ></div>
              ))}
            </div>
          )}
        </div>
      </div>
      
      <!-- Mobile Artwork Info with BORDERS -->
      <div class="text-center">
        <div class="mobile-artwork-info bg-white border-2 border-gray-200 rounded-xl p-4">
          {series.artworks.map((artwork, index) => (
            <div class={`mobile-info ${index === 0 ? 'block' : 'hidden'}`} data-info-index={index}>
              <div class="space-y-2">
                <div class="text-lg font-bold text-gray-900">#{artwork.id}</div>
                <div class="text-sm font-medium text-gray-700">{artwork.title}</div>
                {!artwork.sold && (
                  <div class="text-sm font-medium text-gray-900">€{artwork.price}</div>
                )}
                {artwork.sold && (
                  <div class="text-sm font-medium text-gray-900">Sold</div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</div>

<script>
let carousels = new Map();

document.addEventListener('DOMContentLoaded', function() {
  initDesktopCarousels();
  initMobileCarousels();
});

function initDesktopCarousels() {
  document.querySelectorAll('.desktop-carousel').forEach(carousel => {
    const track = carousel.querySelector('.desktop-track');
    const slides = carousel.querySelectorAll('.desktop-slide');
    const dots = carousel.parentElement.querySelectorAll('.desktop-dot');
    const prevBtn = carousel.querySelector('.desktop-prev');
    const nextBtn = carousel.querySelector('.desktop-next');
    
    let currentIndex = 0;
    
    function updateDesktop() {
      track.style.transform = `translateX(-${currentIndex * 100}%)`;
      
      dots.forEach((dot, i) => {
        if (i === currentIndex) {
          dot.classList.add('bg-gray-700');
          dot.classList.remove('bg-gray-300');
        } else {
          dot.classList.add('bg-gray-300');
          dot.classList.remove('bg-gray-700');
        }
      });
      
      // Update info
      const container = carousel.closest('.series-container');
      const infos = container.querySelectorAll('.desktop-info');
      infos.forEach((info, i) => {
        if (i === currentIndex) {
          info.classList.add('block');
          info.classList.remove('hidden');
        } else {
          info.classList.add('hidden');
          info.classList.remove('block');
        }
      });
    }
    
    function goTo(index) {
      if (index >= slides.length) currentIndex = 0;
      else if (index < 0) currentIndex = slides.length - 1;
      else currentIndex = index;
      updateDesktop();
    }
    
    if (prevBtn) prevBtn.onclick = () => goTo(currentIndex - 1);
    if (nextBtn) nextBtn.onclick = () => goTo(currentIndex + 1);
    
    dots.forEach((dot, i) => {
      dot.onclick = () => goTo(i);
    });
  });
}

function initMobileCarousels() {
  document.querySelectorAll('.mobile-carousel').forEach(carousel => {
    const seriesId = carousel.dataset.series;
    const track = carousel.querySelector('.mobile-track');
    const slides = carousel.querySelectorAll('.mobile-slide');
    const dots = carousel.parentElement.querySelectorAll('.mobile-dot');
    const prevBtn = carousel.querySelector('.mobile-prev');
    const nextBtn = carousel.querySelector('.mobile-next');
    const images = carousel.querySelectorAll('.mobile-slide img');
    
    let currentIndex = 0;
    let startX = 0;
    let startY = 0;
    let isDragging = false;
    let isHorizontalSwipe = false;
    let startTime = 0;
    
    function updateMobile() {
      track.style.transition = 'transform 300ms ease';
      track.style.transform = `translateX(-${currentIndex * 100}%)`;
      
      // Update dots
      dots.forEach((dot, i) => {
        if (i === currentIndex) {
          dot.classList.add('bg-gray-700');
          dot.classList.remove('bg-gray-300');
        } else {
          dot.classList.add('bg-gray-300');
          dot.classList.remove('bg-gray-700');
        }
      });
      
      // Update info
      const container = carousel.closest('.md\\:hidden');
      const infos = container.querySelectorAll('.mobile-info');
      infos.forEach((info, i) => {
        if (i === currentIndex) {
          info.classList.add('block');
          info.classList.remove('hidden');
        } else {
          info.classList.add('hidden');
          info.classList.remove('block');
        }
      });
    }
    
    function goToSlide(index) {
      if (index >= slides.length) currentIndex = 0;
      else if (index < 0) currentIndex = slides.length - 1;
      else currentIndex = index;
      updateMobile();
    }
    
    // Button events
    if (prevBtn) {
      prevBtn.onclick = (e) => {
        e.preventDefault();
        e.stopPropagation();
        goToSlide(currentIndex - 1);
      };
    }
    
    if (nextBtn) {
      nextBtn.onclick = (e) => {
        e.preventDefault();
        e.stopPropagation();
        goToSlide(currentIndex + 1);
      };
    }
    
    // Dot events
    dots.forEach((dot, i) => {
      dot.onclick = () => goToSlide(i);
    });
    
    // Touch events
    track.ontouchstart = (e) => {
      const touch = e.touches[0];
      startX = touch.clientX;
      startY = touch.clientY;
      startTime = Date.now();
      isDragging = false;
      isHorizontalSwipe = false;
      track.style.transition = 'none';
    };
    
    track.ontouchmove = (e) => {
      if (!startX) return;
      
      const touch = e.touches[0];
      const deltaX = touch.clientX - startX;
      const deltaY = touch.clientY - startY;
      
      if (!isDragging && !isHorizontalSwipe) {
        if (Math.abs(deltaX) > 10 && Math.abs(deltaX) > Math.abs(deltaY)) {
          isHorizontalSwipe = true;
          isDragging = true;
          e.preventDefault();
        }
      }
      
      if (isDragging && isHorizontalSwipe) {
        e.preventDefault();
        const percent = (deltaX / track.offsetWidth) * 100;
        const translate = (-currentIndex * 100) + percent;
        track.style.transform = `translateX(${translate}%)`;
      }
    };
    
    track.ontouchend = (e) => {
      if (!isDragging) return;
      
      const touch = e.changedTouches[0];
      const deltaX = touch.clientX - startX;
      const deltaTime = Date.now() - startTime;
      const velocity = Math.abs(deltaX) / deltaTime;
      
      track.style.transition = 'transform 300ms ease';
      
      if (Math.abs(deltaX) > 50 || velocity > 0.3) {
        if (deltaX > 0) {
          goToSlide(currentIndex - 1);
        } else {
          goToSlide(currentIndex + 1);
        }
      } else {
        updateMobile();
      }
      
      // Reset
      startX = 0;
      isDragging = false;
      isHorizontalSwipe = false;
    };
    
    // Image click events
    images.forEach((img, index) => {
      img.onclick = (e) => {
        if (!isDragging) {
          const artworkId = img.closest('.mobile-slide').dataset.artworkId;
          window.location.href = `/artwork/${artworkId}`;
        }
      };
    });
    
    // Initialize
    updateMobile();
  });
}
</script>

<style>
.mobile-carousel-container {
  touch-action: pan-y;
}

.mobile-slide img {
  user-select: none;
  -webkit-user-select: none;
}
</style>