---
export interface Props {
  series: {
    id: string;
    title: string;
    description: string;
    artworks: Array<{
      id: string;
      title: string;
      price: string;
      sold: boolean;
      image: string;
    }>;
  };
  imageLeft?: boolean;
}

const { series, imageLeft = false } = Astro.props;
---

<div class={`series-container ${imageLeft ? 'image-left' : 'image-right'} w-full max-w-6xl mx-auto`}>
  <!-- Desktop Layout -->
  <div class="hidden md:grid md:grid-cols-2 gap-16 items-center px-4">
    <!-- Image Carousel -->
    <div class={`carousel-container ${imageLeft ? '' : 'md:order-2'}`}>
      <div class="relative bg-white rounded-xl shadow-sm overflow-hidden mx-auto max-w-md">
        <!-- Carousel Images -->
        <div class="carousel-wrapper relative" data-series={series.id}>
          <div class="carousel-track flex transition-transform duration-500 ease-in-out">
            {series.artworks.map((artwork, index) => (
              <div class="carousel-slide flex-shrink-0 w-full relative group cursor-pointer" data-artwork-id={artwork.id}>
                <img 
                  src={artwork.image} 
                  alt={artwork.title}
                  class="w-full h-80 object-cover"
                />
                <!-- Subtle overlay -->
                <div class="absolute inset-0 bg-gradient-to-t from-black/5 to-transparent group-hover:from-black/10 transition-all duration-300"></div>
                {artwork.sold && (
                  <div class="absolute top-3 right-3 bg-white text-gray-900 px-2 py-1 rounded-md text-xs font-medium shadow-sm" data-translate="sold">
                    Sold
                  </div>
                )}
              </div>
            ))}
          </div>
          
          <!-- Navigation Arrows -->
          {series.artworks.length > 1 && (
            <>
              <button class="carousel-prev absolute left-3 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white text-gray-600 rounded-full p-2 shadow-md transition-all duration-300 z-10">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </button>
              <button class="carousel-next absolute right-3 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white text-gray-600 rounded-full p-2 shadow-md transition-all duration-300 z-10">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
            </>
          )}
        </div>
        
        <!-- Progress Dots -->
        {series.artworks.length > 1 && (
          <div class="flex justify-center space-x-1.5 py-3 bg-white">
            {series.artworks.map((_, index) => (
              <button 
                class={`dot w-1.5 h-1.5 rounded-full transition-all duration-300 ${index === 0 ? 'bg-gray-700' : 'bg-gray-300'}`}
                data-index={index}
              ></button>
            ))}
          </div>
        )}
      </div>
    </div>
    
    <!-- Text Content -->
    <div class={`content-container ${imageLeft ? 'md:order-2' : 'md:order-1'} flex flex-col justify-center`}>
      <div class={`space-y-4 ${!imageLeft ? 'text-right' : 'text-left'} max-w-md mx-auto`}>
        <div>
          <h3 class="text-2xl font-bold text-gray-900 mb-4 epilogue">{series.title}</h3>
        </div>
        
        <!-- Dynamic Artwork Info -->
        <div class="artwork-info">
          {series.artworks.map((artwork, index) => (
            <div class={`artwork-details ${index === 0 ? 'block' : 'hidden'}`} data-artwork-index={index}>
              <div class="space-y-1">
                <div class="text-xl font-bold text-gray-900 epilogue">#{artwork.id}</div>
                <div class="text-base font-medium text-gray-700 epilogue">{artwork.title}</div>
                {!artwork.sold && (
                  <div class="text-base font-medium text-gray-900 epilogue">€{artwork.price}</div>
                )}
                {artwork.sold && (
                  <div class="text-base font-medium text-gray-900 epilogue" data-translate="sold">Sold</div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
  
  <!-- Mobile Layout with PERFECT SWIPING -->
  <div class="md:hidden px-4">
    <div class="space-y-4 max-w-md mx-auto">
      <!-- Series Title -->
      <div class="text-center">
        <h3 class="text-xl font-bold text-gray-900 mb-4 epilogue">{series.title}</h3>
      </div>
      
      <!-- Mobile Carousel -->
      <div class="mobile-carousel-container">
        <div class="relative bg-white rounded-xl shadow-sm overflow-hidden border border-gray-200 mx-auto">
          <div class="mobile-carousel-wrapper relative" data-series={`${series.id}-mobile`}>
            <div class="mobile-carousel-track flex transition-transform duration-300 ease-out" style="transform: translateX(0%);">
              {series.artworks.map((artwork, index) => (
                <div class="mobile-carousel-slide flex-shrink-0 w-full relative select-none" data-artwork-id={artwork.id} data-slide-index={index}>
                  <img 
                    src={artwork.image} 
                    alt={artwork.title}
                    class="w-full h-72 object-cover pointer-events-none"
                    draggable="false"
                  />
                  {artwork.sold && (
                    <div class="absolute top-3 right-3 bg-white text-gray-900 px-2 py-1 rounded-md text-xs font-medium shadow-sm" data-translate="sold">
                      Sold
                    </div>
                  )}
                </div>
              ))}
            </div>
            
            <!-- Mobile Navigation Arrows -->
            {series.artworks.length > 1 && (
              <>
                <button class="mobile-carousel-prev absolute left-2 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white text-gray-600 rounded-full p-1.5 shadow-md transition-all duration-300 z-10 touch-manipulation">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                </button>
                <button class="mobile-carousel-next absolute right-2 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white text-gray-600 rounded-full p-1.5 shadow-md transition-all duration-300 z-10 touch-manipulation">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </button>
              </>
            )}
          </div>
          
          <!-- Mobile Progress Dots -->
          {series.artworks.length > 1 && (
            <div class="flex justify-center space-x-1.5 py-3 bg-white">
              {series.artworks.map((_, index) => (
                <div 
                  class={`mobile-dot w-1.5 h-1.5 rounded-full transition-all duration-300 ${index === 0 ? 'bg-gray-700' : 'bg-gray-300'} cursor-pointer`}
                  data-index={index}
                ></div>
              ))}
            </div>
          )}
        </div>
      </div>
      
      <!-- Mobile Artwork Info -->
      <div class="text-center">
        <div class="mobile-artwork-info max-w-sm mx-auto">
          {series.artworks.map((artwork, index) => (
            <div class={`mobile-artwork-details ${index === 0 ? 'block' : 'hidden'}`} data-mobile-artwork-index={index}>
              <div class="space-y-1">
                <div class="text-lg font-bold text-gray-900">#{artwork.id}</div>
                <div class="text-sm font-medium text-gray-700">{artwork.title}</div>
                {!artwork.sold && (
                  <div class="text-sm font-medium text-gray-900">€{artwork.price}</div>
                )}
                {artwork.sold && (
                  <div class="text-sm font-medium text-gray-900" data-translate="sold">Sold</div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize all carousels
    const carousels = document.querySelectorAll('.carousel-wrapper, .mobile-carousel-wrapper');
    
    carousels.forEach(carousel => {
      initializeCarousel(carousel);
    });
  });
  
  function initializeCarousel(carousel) {
    const track = carousel.querySelector('.carousel-track, .mobile-carousel-track');
    const slides = carousel.querySelectorAll('.carousel-slide, .mobile-carousel-slide');
    const dots = carousel.parentElement.querySelectorAll('.dot, .mobile-dot');
    const prevButton = carousel.querySelector('.carousel-prev, .mobile-carousel-prev');
    const nextButton = carousel.querySelector('.carousel-next, .mobile-carousel-next');
    const seriesId = carousel.dataset.series;
    const isMobile = carousel.classList.contains('mobile-carousel-wrapper');
    
    let currentIndex = 0;
    let isAnimating = false;
    
    // Update carousel position and UI
    function updateCarousel(animate = true) {
      if (animate) {
        isAnimating = true;
        track.style.transition = 'transform 300ms ease-out';
        setTimeout(() => {
          isAnimating = false;
        }, 300);
      } else {
        track.style.transition = 'none';
      }
      
      const translateX = -currentIndex * 100;
      track.style.transform = `translateX(${translateX}%)`;
      
      // Update dots
      dots.forEach((dot, index) => {
        dot.classList.toggle('bg-gray-700', index === currentIndex);
        dot.classList.toggle('bg-gray-300', index !== currentIndex);
      });
      
      // Update artwork info
      if (!isMobile) {
        const seriesContainer = carousel.closest('.series-container');
        if (seriesContainer) {
          const artworkDetails = seriesContainer.querySelectorAll('.artwork-details');
          artworkDetails.forEach((detail, index) => {
            detail.classList.toggle('block', index === currentIndex);
            detail.classList.toggle('hidden', index !== currentIndex);
          });
        }
      } else {
        const seriesContainer = carousel.closest('.md\\:hidden');
        if (seriesContainer) {
          const mobileArtworkDetails = seriesContainer.querySelectorAll('.mobile-artwork-details');
          mobileArtworkDetails.forEach((detail, index) => {
            detail.classList.toggle('block', index === currentIndex);
            detail.classList.toggle('hidden', index !== currentIndex);
          });
        }
      }
    }
    
    // Navigation functions
    function goToSlide(index) {
      if (isAnimating || index === currentIndex) return;
      
      if (index >= slides.length) {
        currentIndex = 0;
      } else if (index < 0) {
        currentIndex = slides.length - 1;
      } else {
        currentIndex = index;
      }
      updateCarousel();
    }
    
    function nextSlide() {
      goToSlide(currentIndex + 1);
    }
    
    function prevSlide() {
      goToSlide(currentIndex - 1);
    }
    
    // Arrow button navigation
    if (prevButton) {
      prevButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        prevSlide();
      });
      
      prevButton.addEventListener('touchend', function(e) {
        e.preventDefault();
        e.stopPropagation();
        prevSlide();
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        nextSlide();
      });
      
      nextButton.addEventListener('touchend', function(e) {
        e.preventDefault();
        e.stopPropagation();
        nextSlide();
      });
    }
    
    // Dot navigation
    dots.forEach((dot, index) => {
      dot.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        goToSlide(index);
      });
      
      dot.addEventListener('touchend', function(e) {
        e.preventDefault();
        e.stopPropagation();
        goToSlide(index);
      });
    });
    
    // PERFECT MOBILE SWIPE HANDLING
    if (isMobile) {
      let startX = null;
      let startY = null;
      let currentX = null;
      let isDragging = false;
      let isHorizontalSwipe = false;
      let startTime = null;
      
      function handleTouchStart(e) {
        if (isAnimating) return;
        
        const touch = e.touches[0];
        startX = touch.clientX;
        startY = touch.clientY;
        currentX = startX;
        isDragging = false;
        isHorizontalSwipe = false;
        startTime = Date.now();
        
        track.style.transition = 'none';
      }
      
      function handleTouchMove(e) {
        if (!startX || !startY || isAnimating) return;
        
        const touch = e.touches[0];
        currentX = touch.clientX;
        const currentY = touch.clientY;
        
        const deltaX = currentX - startX;
        const deltaY = currentY - startY;
        const absDeltaX = Math.abs(deltaX);
        const absDeltaY = Math.abs(deltaY);
        
        // Determine if this is a horizontal swipe
        if (!isDragging && !isHorizontalSwipe) {
          if (absDeltaX > 10 || absDeltaY > 10) {
            if (absDeltaX > absDeltaY && absDeltaX > 10) {
              isHorizontalSwipe = true;
              isDragging = true;
              e.preventDefault();
            } else if (absDeltaY > absDeltaX) {
              // Vertical scroll - let it happen
              return;
            }
          }
        }
        
        if (isDragging && isHorizontalSwipe) {
          e.preventDefault();
          
          // Calculate drag with boundaries
          const containerWidth = track.offsetWidth;
          const dragPercentage = (deltaX / containerWidth) * 100;
          const baseTranslate = -currentIndex * 100;
          let newTranslate = baseTranslate + dragPercentage;
          
          // Add resistance at boundaries
          const maxTranslate = 0;
          const minTranslate = -(slides.length - 1) * 100;
          
          if (newTranslate > maxTranslate) {
            newTranslate = maxTranslate + (newTranslate - maxTranslate) * 0.3;
          } else if (newTranslate < minTranslate) {
            newTranslate = minTranslate + (newTranslate - minTranslate) * 0.3;
          }
          
          track.style.transform = `translateX(${newTranslate}%)`;
        }
      }
      
      function handleTouchEnd(e) {
        if (!startX || !isDragging || !isHorizontalSwipe || isAnimating) {
          resetTouchState();
          return;
        }
        
        const deltaX = currentX - startX;
        const deltaTime = Date.now() - startTime;
        const velocity = Math.abs(deltaX) / deltaTime; // pixels per ms
        const absDeltaX = Math.abs(deltaX);
        
        // Determine if we should change slides
        const threshold = 50; // minimum drag distance
        const velocityThreshold = 0.3; // minimum velocity for quick swipe
        
        let shouldChangeSlide = false;
        let direction = 0;
        
        if (absDeltaX > threshold || velocity > velocityThreshold) {
          shouldChangeSlide = true;
          direction = deltaX > 0 ? -1 : 1; // swipe right = previous (-1), swipe left = next (1)
        }
        
        if (shouldChangeSlide) {
          const newIndex = currentIndex + direction;
          if (newIndex >= 0 && newIndex < slides.length) {
            goToSlide(newIndex);
          } else {
            // Snap back if at boundaries
            updateCarousel();
          }
        } else {
          // Snap back to current slide
          updateCarousel();
        }
        
        resetTouchState();
      }
      
      function resetTouchState() {
        startX = null;
        startY = null;
        currentX = null;
        isDragging = false;
        isHorizontalSwipe = false;
        startTime = null;
      }
      
      // Add touch events to the track
      track.addEventListener('touchstart', handleTouchStart, { passive: true });
      track.addEventListener('touchmove', handleTouchMove, { passive: false });
      track.addEventListener('touchend', handleTouchEnd, { passive: true });
      track.addEventListener('touchcancel', resetTouchState, { passive: true });
      
      // Prevent context menu
      track.addEventListener('contextmenu', function(e) {
        e.preventDefault();
      });
    }
    
    // Click to view artwork (but not when dragging on mobile)
    slides.forEach((slide, index) => {
      let clickStartTime = 0;
      
      slide.addEventListener('mousedown', () => {
        clickStartTime = Date.now();
      });
      
      slide.addEventListener('touchstart', () => {
        clickStartTime = Date.now();
      });
      
      slide.addEventListener('click', function(e) {
        const clickDuration = Date.now() - clickStartTime;
        if ((!isMobile || !isDragging) && clickDuration < 300) {
          const artworkId = this.dataset.artworkId;
          window.location.href = `/artwork/${artworkId}`;
        }
      });
      
      slide.addEventListener('touchend', function(e) {
        const clickDuration = Date.now() - clickStartTime;
        if (!isDragging && clickDuration < 300 && Math.abs(currentX - startX) < 10) {
          e.preventDefault();
          const artworkId = this.dataset.artworkId;
          window.location.href = `/artwork/${artworkId}`;
        }
      });
    });
    
    // Initialize
    updateCarousel(false);
  }
</script>

<style>
  .mobile-carousel-track {
    touch-action: pan-y;
    will-change: transform;
  }
  
  
  .mobile-carousel-container {
    user-select: none;
    -webkit-user-select: none;
    -webkit-touch-callout: none;
  }
  
  .touch-manipulation {
    touch-action: manipulation;
  }
  
  .select-none {
    user-select: none;
    -webkit-user-select: none;
  }
</style>